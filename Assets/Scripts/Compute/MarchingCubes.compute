#pragma kernel March
#include "/Includes/MarchTables.compute"

static const int numThreads = 8;

struct Triangle {
    float3 vertexC;
    float3 vertexB;
    float3 vertexA;
};

AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<float4> points;

int pointsPerAxis;
float isoLevel;

float3 interpolate(float4 v1, float4 v2) {
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz-v1.xyz);
}

int indexArray(int x, int y, int z) {
    return x + y * pointsPerAxis + z * pointsPerAxis * pointsPerAxis;
}

bool outOfBounds(int x, int y, int z) {
    return pointsPerAxis - 1 <= x || pointsPerAxis - 1 <= y || pointsPerAxis - 1 <= z;
 }

[numthreads(numThreads,numThreads,numThreads)]
void March (int3 id : SV_DispatchThreadID)
{   
    if (outOfBounds(id.x, id.y, id.z)) {
        return;
    }

    float4 cubeCorners[8] = {
        points[indexArray(id.x, id.y, id.z)],
        points[indexArray(id.x + 1, id.y, id.z)],
        points[indexArray(id.x + 1, id.y, id.z + 1)],
        points[indexArray(id.x, id.y, id.z + 1)],
        points[indexArray(id.x, id.y + 1, id.z)],
        points[indexArray(id.x + 1, id.y + 1, id.z)],
        points[indexArray(id.x + 1, id.y + 1, id.z + 1)],
        points[indexArray(id.x, id.y + 1, id.z + 1)]
    };

    int cubeIndex = 0;
    if (cubeCorners[0].w < isoLevel) cubeIndex |= 1;
    if (cubeCorners[1].w < isoLevel) cubeIndex |= 2;
    if (cubeCorners[2].w < isoLevel) cubeIndex |= 4;
    if (cubeCorners[3].w < isoLevel) cubeIndex |= 8;
    if (cubeCorners[4].w < isoLevel) cubeIndex |= 16;
    if (cubeCorners[5].w < isoLevel) cubeIndex |= 32;
    if (cubeCorners[6].w < isoLevel) cubeIndex |= 64;
    if (cubeCorners[7].w < isoLevel) cubeIndex |= 128;

    for (int i = 0; triangulation[cubeIndex][i] != -1; i +=3) {

        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i+1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i+1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i+2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i+2]];

        Triangle tri;
        tri.vertexA = interpolate(cubeCorners[a0], cubeCorners[b0]);
        tri.vertexB = interpolate(cubeCorners[a1], cubeCorners[b1]);
        tri.vertexC = interpolate(cubeCorners[a2], cubeCorners[b2]);
        triangles.Append(tri);
    }


}
